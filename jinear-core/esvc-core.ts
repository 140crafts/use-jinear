/* tslint:disable */
/* eslint-disable */
// Generated using typescript-generator version 3.0.1157 on 2022-11-13 15:52:03.

export interface BaseDto {
    createdDate: Date;
    lastUpdatedDate: Date;
    passiveId: string;
}

export interface PageDto<T> {
    totalPages: number;
    totalElements: number;
    number: number;
    size: number;
    numberOfElements: number;
    content: T[];
    hasContent: boolean;
    hasNext: boolean;
    hasPrevious: boolean;
    first: boolean;
    last: boolean;
}

export interface AccountDto extends BaseDto {
    accountId: string;
    email: string;
    emailConfirmed: boolean;
    username?: string | null;
    roles: AccountRoleDto[];
    profilePicture?: MediaDto | null;
    teams: TeamDto[];
}

export interface AccountRoleDto {
    role: RoleType;
}

export interface PlainAccountDto extends BaseDto {
    accountId: string;
    username: string;
}

export interface CustomerDto extends BaseDto {
    customerId: string;
    teamId: string;
    name: string;
    normalizedName: string;
    gsm: string;
}

export interface MediaDto extends BaseDto {
    mediaId: string;
    ownerId: string;
    relatedObjectId: string;
    mediaOwnerType: MediaOwnerType;
    fileType: FileType;
    bucketName: string;
    storagePath: string;
    originalName: string;
}

export interface ServiceRecordDto extends BaseDto {
    serviceRecordId: string;
    customerId: string;
    title: string;
    notes: string;
    handle: string;
    status: ServiceRecordStatus;
    customerDto: CustomerDto;
}

export interface TeamDto extends BaseDto {
    teamId: string;
    title: string;
    description: string;
    username: string;
    settings: TeamSettingDto;
    profilePicture: MediaDto;
}

export interface TeamMemberDto extends BaseDto {
    teamMemberId: string;
    teamId: string;
    accountId: string;
    role: TeamAccountRoleType;
    accountDto: AccountDto;
}

export interface TeamSettingDto extends BaseDto {
    visibility: TeamVisibilityType;
    contentVisibility: TeamContentVisibilityType;
    joinType: TeamJoinType;
}

export interface TokenDto extends BaseDto {
    tokenId: string;
    relatedObject: string;
    tokenType: TokenType;
    uniqueToken: string;
    commonToken: string;
    additionalData: string;
    expiresAt: number;
}

export interface UsernameDto {
    username: string;
    relatedObjectId: string;
    relatedObjectType: UsernameRelatedObjectType;
}

export interface BaseEntity {
    createdDate: Date;
    lastUpdatedDate: Date;
    passiveId: string;
}

export interface LocaleString extends BaseEntity {
    id: number;
    stringType: LocaleStringType;
    locale: LocaleType;
    value: string;
}

export interface SessionInfo extends BaseEntity {
    sessionInfoId: string;
    accountId: string;
    provider: ProviderType;
    token: string;
    sessionId: string;
    remoteAddr: string;
}

export interface Account extends BaseEntity {
    accountId: string;
    email: string;
    emailConfirmed: boolean;
    roles: AccountRole[];
    username: Username;
    accountPassword: AccountPassword;
}

export interface AccountPassword extends BaseEntity {
    accountPasswordId: string;
    accountId: string;
    password: string;
    autoGenerated: boolean;
}

export interface AccountRole extends BaseEntity {
    accountRoleId: number;
    accountId: string;
    role: RoleType;
}

export interface Customer extends BaseEntity {
    customerId: string;
    teamId: string;
    name: string;
    normalizedName: string;
    gsm: string;
}

export interface CustomerBalanceActivity extends BaseEntity {
    customerBalanceActivityId: string;
    customerId: string;
    balanceActivityType: CustomerBalanceActivityType;
    source: CustomerBalanceActivitySource;
    amount: number;
}

export interface Media extends BaseEntity {
    mediaId: string;
    ownerId: string;
    relatedObjectId: string;
    mediaOwnerType: MediaOwnerType;
    fileType: FileType;
    bucketName: string;
    storagePath: string;
    originalName: string;
}

export interface Passive {
    passiveId: string;
    createdDate: Date;
    lastUpdatedDate: Date;
    responsibleAccountId: string;
    relatedObjectId: string;
    reason: string;
    reasonType: PassiveReason;
    reasonSubtype: PassiveReason;
}

export interface ServiceRecord extends BaseEntity {
    serviceRecordId: string;
    customerId: string;
    title: string;
    notes: string;
    handle: string;
    status: ServiceRecordStatus;
    customer: Customer;
}

export interface Team extends BaseEntity {
    teamId: string;
    title: string;
    description: string;
    username: Username;
    settings: TeamSetting;
}

export interface TeamActivity extends BaseEntity {
    teamActivityId: string;
    teamId: string;
    accountId: string;
    relatedObjectId: string;
    type: TeamActivityType;
}

export interface TeamMember extends BaseEntity {
    teamMemberId: string;
    teamId: string;
    accountId: string;
    role: TeamAccountRoleType;
}

export interface TeamSetting extends BaseEntity {
    teamSettingId: string;
    teamId: string;
    visibility: TeamVisibilityType;
    contentVisibility: TeamContentVisibilityType;
    joinType: TeamJoinType;
    team: Team;
}

export interface Token extends BaseEntity {
    tokenId: string;
    relatedObject: string;
    tokenType: TokenType;
    uniqueToken: string;
    commonToken: string;
    additionalData: string;
    expiresAt: number;
}

export interface ReservedUsername {
    reservedUsernameId: number;
    username: string;
}

export interface Username extends BaseEntity {
    usernameId: string;
    relatedObjectId: string;
    relatedObjectType: UsernameRelatedObjectType;
    username: string;
    account: Account;
    team: Team;
}

export interface BaseRequest {
    locale?: string | null;
    conversationId?: string | null;
}

export interface CompleteResetPasswordRequest extends BaseRequest {
    uniqueToken: string;
    localeType: LocaleType;
}

export interface ConfirmEmailRequest extends BaseRequest {
    uniqueToken: string;
}

export interface InitializeResetPasswordRequest extends BaseRequest {
    email: string;
    preferredLocale: LocaleType;
}

export interface ResendConfirmEmailRequest extends BaseRequest {
    email: string;
    preferredLocaleType: LocaleType;
}

export interface UpdatePasswordRequest extends BaseRequest {
    currentPassword: string;
    newPassword: string;
}

export interface RegisterViaMailRequest {
    email: string;
    password: string;
    preferredLocale: LocaleType;
}

export interface AuthCompleteRequest extends BaseRequest {
    email: string;
    provider: ProviderType;
    csrf: string;
    code: string;
}

export interface AuthInitializeRequest extends BaseRequest {
    email: string;
    preferredLocale?: LocaleType | null;
}

export interface LoginWithPasswordRequest extends BaseRequest {
    email: string;
    password: string;
}

export interface CreateServiceRecordRequest extends BaseRequest {
    customerId: string;
    title: string;
    notes: string;
}

export interface CreateServiceRecordRequestWithNewCustomer extends BaseRequest {
    teamId: string;
    customerGsm: string;
    customerName: string;
    title: string;
    notes: string;
}

export interface UpdateServiceRecordStatusRequest extends BaseRequest {
    serviceRecordId: string;
    status: ServiceRecordStatus;
}

export interface TeamInitializeRequest extends BaseRequest {
    title: string;
    description: string;
    handle: string;
    visibility: TeamVisibilityType;
    joinType: TeamJoinType;
}

export interface BaseResponse {
    responseStatusType: ResponseStatusType;
    errorCode: string;
    errorMessage: string;
    errorGroup: string;
    consumerErrorMessage: string;
    responseLocale: string;
    systemTime: number;
    conversationId: string;
}

export interface BaseResponseBuilder {
}

export interface AccountRetrieveResponse extends BaseResponse {
    data: AccountDto;
}

export interface AuthInitializeResponse extends BaseResponse {
    email: string;
    csrf: string;
    preferredLocaleId: number;
    code: string;
}

export interface AuthResponse extends BaseResponse {
    token: string;
}

export interface CustomerSearchBaseResponse extends BaseResponse {
    data: PageDto<CustomerDto>;
}

export interface ServiceRecordResponse extends BaseResponse {
    data: ServiceRecordDto;
}

export interface ServiceRecordSearchResponse extends BaseResponse {
    data: PageDto<ServiceRecordDto>;
}

export interface ServiceRecordStatusResponse extends BaseResponse {
    data: ServiceRecordStatus[];
}

export interface TeamBaseResponse extends BaseResponse {
    data: TeamDto;
}

export interface TeamMemberListingBaseResponse extends BaseResponse {
    data: PageDto<TeamMemberDto>;
}

export interface AccountInitializeVo {
    email: string;
    emailConfirmed: boolean;
    password: string;
    preferredLocale?: LocaleType | null;
}

export interface AccountPasswordVo {
    accountId: string;
    clearText?: string | null;
    autoGenerated?: boolean | null;
}

export interface AccountPasswordVoBuilder {
}

export interface InitializeResetPasswordVo {
    email: string;
    preferredLocale: LocaleType;
}

export interface ValidatePasswordVo {
    accountId: string;
    password: string;
}

export interface AuthResponseVo {
    accountId: string;
    authorities: GrantedAuthority[];
}

export interface AuthVo {
    email: string;
    csrf: string;
    preferredLocale: LocaleType;
    code: string;
}

export interface InitializeCustomerVo {
    teamId: string;
    name: string;
    gsm: string;
}

export interface UpdateCustomerVo extends InitializeCustomerVo {
    customerId: string;
}

export interface AccountEngageMailVo {
    email: string;
    preferredLocale: LocaleType;
    token: string;
}

export interface LoginMailVo {
    email: string;
    preferredLocale: LocaleType;
    emailCode: string;
}

export interface SendMailVo {
    to: string;
    subject: string;
    context: string;
    attachment: string;
    attachmentFileName: string;
    attachmentContentType: string;
}

export interface InitializeMediaVo {
    ownerId: string;
    relatedObjectId: string;
    file: MultipartFile;
    fileType: FileType;
    mediaOwnerType: MediaOwnerType;
}

export interface RemoveMediaVo {
    responsibleAccountId: string;
    mediaId: string;
}

export interface CreatePassiveVo {
    responsibleAccountId: string;
    relatedObjectId: string;
    reason: string;
    reasonType: PassiveReason;
    reasonSubtype: PassiveReason;
}

export interface CreatePassiveVoBuilder {
}

export interface InitializeServiceRecordVo {
    customerId: string;
    title: string;
    notes: string;
}

export interface UpdateServiceRecordStatusVo {
    serviceRecordId: string;
    status: ServiceRecordStatus;
}

export interface DeleteTeamMemberVo {
    accountId: string;
    teamId: string;
}

export interface InitializeTeamMemberVo {
    accountId: string;
    teamId: string;
    role: TeamAccountRoleType;
}

export interface TeamActivityCreateVo {
    teamId: string;
    accountId: string;
    relatedObjectId: string;
    type: TeamActivityType;
}

export interface TeamInitializeVo {
    ownerId: string;
    title: string;
    description: string;
    handle: string;
    visibility: TeamVisibilityType;
    joinType: TeamJoinType;
    appendRandomStrOnCollision: boolean;
}

export interface TeamSettingsInitializeVo {
    teamId: string;
    visibility: TeamVisibilityType;
    joinType: TeamJoinType;
}

export interface GenerateTokenVo {
    relatedObject: string;
    tokenType: TokenType;
    uniqueToken: string;
    commonToken: string;
    additionalData: string;
    ttl: number;
}

export interface GenerateTokenVoBuilder {
}

export interface InitializeUsernameVo {
    relatedObjectId: string;
    relatedObjectType: UsernameRelatedObjectType;
    username: string;
    appendRandomStrOnCollision: boolean;
}

export interface GrantedAuthority extends Serializable {
    authority: string;
}

export interface MultipartFile extends InputStreamSource {
    contentType: string;
    name: string;
    bytes: any;
    empty: boolean;
    resource: Resource;
    size: number;
    originalFilename: string;
}

export interface Serializable {
}

export interface Resource extends InputStreamSource {
    open: boolean;
    file: any;
    readable: boolean;
    url: URL;
    filename: string;
    description: string;
    uri: URI;
}

export interface InputStreamSource {
    inputStream: any;
}

export interface URL extends Serializable {
}

export interface URI extends Comparable<URI>, Serializable {
}

export interface Comparable<T> {
}

export type DayType = "MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY";

export type ResponseStatusType = "SUCCESS" | "FAILURE";

export type PermissionType = "ACCOUNT_ROLE_EDIT";

export type RoleType = "ADMIN" | "USER";

export type ProviderType = "OTP_MAIL" | "PASSWORD_MAIL";

export type CustomerBalanceActivitySource = "CARD" | "CASH" | "OTHER";

export type CustomerBalanceActivityType = "DEBT" | "PAYMENT";

export type LocaleStringType = "LOGIN_SMS_TEXT" | "LOGIN_MAIL_TITLE" | "LOGIN_MAIL_TEXT" | "MAIL_CONFIRMATION_TITLE" | "MAIL_CONFIRMATION_TEXT" | "MAIL_CONFIRMATION_CTA_LABEL" | "PASSWORD_RESET_TITLE" | "PASSWORD_RESET_TEXT" | "PASSWORD_RESET_CTA_LABEL" | "NEW_PASSWORD_TITLE" | "NEW_PASSWORD_TEXT";

export type LocaleType = "TR" | "EN";

export type LockSourceType = "BALANCE";

export type FileType = "PROFILE_PIC";

export type MediaOwnerType = "USER" | "COMMUNITY" | "TEAM";

export type PassiveReason = "SYSTEM" | "USER_ACTION" | "FREEZE_ACCOUNT" | "DELETE_ACCOUNT" | "BANNED_ACCOUNT" | "SUSPENDED_ACCOUNT" | "REQUEST_RESPONSE" | "SMS_LOGIN_TOKEN_USED" | "PHONE_CHANGED" | "EMAIL_LOGIN_TOKEN_EXPIRED" | "EMAIL_LOGIN_TOKEN_USED" | "EMAIL_ATTACH_TOKEN_USED" | "REMOVE_FEATURE" | "REPORT_RESOLVE_GUILTY" | "REPORT_RESOLVE_NOT_GUILTY" | "TICKET_RESOLVE" | "WAIT_LIST_PASSCODE_USED" | "PROFILE_PIC_UPDATE" | "UNFOLLOW" | "PAYMENT_ISSUE";

export type ServiceRecordStatus = "ACCEPTED" | "IN_PROGRESS" | "WAITING_FOR_PART" | "SHIPPED" | "CLOSED";

export type TeamAccountRoleType = "OWNER" | "ADMIN" | "MEMBER";

export type TeamActivityType = "JOIN" | "LEAVE" | "KICKED_OUT" | "REQUESTED_ACCESS" | "PLACED_BET" | "WON_BET" | "LOST_BET";

export type TeamContentVisibilityType = "VISIBLE" | "HIDDEN";

export type TeamJoinType = "PUBLIC" | "WITH_REQUEST" | "WITH_PASSWORD";

export type TeamVisibilityType = "VISIBLE" | "HIDDEN_LISTED" | "HIDDEN_UNLISTED";

export type TokenType = "SMS_LOGIN" | "EMAIL_LOGIN" | "WEB_USERNAME_LOGIN" | "BOOKING_EMAIL_VALIDATION" | "CONTINUE_AS_LOGIN_TOKEN" | "CONFIRM_EMAIL" | "RESET_PASSWORD";

export type UsernameRelatedObjectType = "ACCOUNT" | "COMMUNITY" | "TEAMS";
