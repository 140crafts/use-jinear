package co.jinear.core.manager.account;

import co.jinear.core.model.request.account.CompleteResetPasswordRequest;
import co.jinear.core.model.request.account.InitializeResetPasswordRequest;
import co.jinear.core.model.request.account.UpdatePasswordRequest;
import co.jinear.core.model.response.BaseResponse;
import co.jinear.core.model.vo.account.password.AccountPasswordVo;
import co.jinear.core.model.vo.account.password.InitializeResetPasswordVo;
import co.jinear.core.model.vo.account.password.ValidatePasswordVo;
import co.jinear.core.service.SessionInfoService;
import co.jinear.core.service.account.AccountPasswordResetService;
import co.jinear.core.service.account.AccountPasswordService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class AccountPasswordManager {

    private final AccountPasswordService accountPasswordService;
    private final AccountPasswordResetService accountPasswordResetService;
    private final ModelMapper modelMapper;
    private final SessionInfoService sessionInfoService;

    public BaseResponse updateAccountPassword(UpdatePasswordRequest updatePasswordRequest) {
        String currentAccountId = sessionInfoService.currentAccountId();
        log.info("Update account password has started. accountId: {}", currentAccountId);
        validatePassword(updatePasswordRequest, currentAccountId);
        updatePassword(updatePasswordRequest, currentAccountId);
        return new BaseResponse();
    }

    public BaseResponse initializeResetAccountPassword(InitializeResetPasswordRequest initializeResetPasswordRequest) {
        log.info("Reset account password has started. initializeResetPasswordRequest: {}", initializeResetPasswordRequest);
        InitializeResetPasswordVo initializeResetPasswordVo = modelMapper.map(initializeResetPasswordRequest, InitializeResetPasswordVo.class);
        accountPasswordResetService.sendResetPasswordMail(initializeResetPasswordVo);
        return new BaseResponse();
    }

    public BaseResponse validateAndResetPassword(CompleteResetPasswordRequest completeResetPasswordRequest) {
        log.info("Validate and reset password has started. completeResetPasswordRequest: {}", completeResetPasswordRequest);
        accountPasswordResetService.validateAndResetAccountPassword(completeResetPasswordRequest.getUniqueToken(), completeResetPasswordRequest.getLocale());
        return new BaseResponse();
    }

    private void updatePassword(UpdatePasswordRequest updatePasswordRequest, String accountId) {
        AccountPasswordVo accountPasswordVo = AccountPasswordVo.builder()
                .accountId(accountId)
                .clearText(updatePasswordRequest.getNewPassword())
                .autoGenerated(Boolean.FALSE)
                .build();
        accountPasswordService.updateAccountPassword(accountPasswordVo);
    }

    private void validatePassword(UpdatePasswordRequest updatePasswordRequest, String accountId) {
        ValidatePasswordVo validatePasswordVo = new ValidatePasswordVo();
        validatePasswordVo.setAccountId(accountId);
        validatePasswordVo.setPassword(updatePasswordRequest.getCurrentPassword());
        accountPasswordService.validatePassword(validatePasswordVo);
    }

}
