package co.jinear.core.service.account;

import co.jinear.core.exception.BusinessException;
import co.jinear.core.exception.auth.BadCredentialsException;
import co.jinear.core.model.entity.account.AccountPassword;
import co.jinear.core.model.vo.account.password.AccountPasswordVo;
import co.jinear.core.model.vo.account.password.ValidatePasswordVo;
import co.jinear.core.repository.AccountPasswordRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class AccountPasswordService {

    private final AccountPasswordRepository accountPasswordRepository;
    private final BCryptPasswordEncoder bCryptPasswordEncoder;

    public void createPassword(AccountPasswordVo accountPasswordVo) {
        log.info("Create password has started for account: {}", accountPasswordVo.getAccountId());
        AccountPassword accountPassword = mapValues(accountPasswordVo);
        AccountPassword saved = accountPasswordRepository.save(accountPassword);
        log.info("Create password has finished for account: {}, accountPasswordId: {}", saved.getAccountId(), saved.getAccountPasswordId());
    }

    public void updateAccountPassword(AccountPasswordVo accountPasswordVo) {
        log.info("Update password has started for account: {}", accountPasswordVo.getAccountId());
        AccountPassword accountPassword = retrieveAccountPassword(accountPasswordVo.getAccountId());
        Optional.of(accountPasswordVo).map(AccountPasswordVo::getClearText).map(bCryptPasswordEncoder::encode).ifPresent(accountPassword::setPassword);
        Optional.of(accountPasswordVo).map(AccountPasswordVo::getAutoGenerated).ifPresent(accountPassword::setAutoGenerated);
        AccountPassword saved = accountPasswordRepository.save(accountPassword);
        log.info("Update password has finished for account: {}, accountPasswordId: {}", saved.getAccountId(), saved.getAccountPasswordId());
    }

    public void validatePassword(ValidatePasswordVo validatePasswordVo) {
        String accountId = validatePasswordVo.getAccountId();
        log.info("Validate password has started for accountId: {}", accountId);
        AccountPassword accountPassword = retrieveAccountPassword(accountId);
        if (!bCryptPasswordEncoder.matches(validatePasswordVo.getPassword(), accountPassword.getPassword())) {
            throw new BadCredentialsException();
        }
    }

    private AccountPassword retrieveAccountPassword(String accountId) {
        log.info("Retrieve account password has started for accountId: {}", accountId);
        return accountPasswordRepository.findByAccountIdAndPassiveIdIsNull(accountId)
                .orElseThrow(() -> {
                    throw new BusinessException("password.not-found");
                });
    }

    private AccountPassword mapValues(AccountPasswordVo accountPasswordVo) {
        AccountPassword accountPassword = new AccountPassword();
        accountPassword.setAccountId(accountPasswordVo.getAccountId());
        accountPassword.setPassword(bCryptPasswordEncoder.encode(accountPasswordVo.getClearText()));
        accountPassword.setAutoGenerated(accountPasswordVo.getAutoGenerated());
        return accountPassword;
    }
}
