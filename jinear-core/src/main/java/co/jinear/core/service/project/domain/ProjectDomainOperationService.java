package co.jinear.core.service.project.domain;

import co.jinear.core.exception.BusinessException;
import co.jinear.core.model.entity.project.ProjectDomain;
import co.jinear.core.model.enumtype.project.ProjectDomainCnameCheckResultType;
import co.jinear.core.model.enumtype.project.ProjectDomainType;
import co.jinear.core.repository.project.ProjectDomainRepository;
import co.jinear.core.service.passive.PassiveService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.validator.internal.util.DomainNameUtil;
import org.springframework.stereotype.Service;

import java.util.Objects;

@Slf4j
@Service
@RequiredArgsConstructor
public class ProjectDomainOperationService {

    private static final String BASE_PROJECT_DOMAIN = "%s.projects.jinear.co";

    private final ProjectDomainRepository projectDomainRepository;
    private final ProjectDomainLockService projectDomainLockService;
    private final ProjectDomainRetrieveService projectDomainRetrieveService;
    private final PassiveService passiveService;
    private final ProjectDomainDnsChecker projectDomainDnsChecker;

    public void initializeBaseProjectDomain(String projectId) {
        log.info("Initialize base project domain has started. projectId: {}", projectId);
        String domain = BASE_PROJECT_DOMAIN.formatted(projectId);
        initialize(projectId, domain, ProjectDomainType.AUTO_GENERATED);
        log.info("Initialize base project domain has completed. projectId: {}", projectId);
    }

    public void initialize(String projectId, String domain, ProjectDomainType projectDomainType) {
        log.info("Initialize project domain has started. projectId: {}, projectDomainType: {}, domain: {}", projectId, projectDomainType, domain);
        projectDomainLockService.lockDomain(domain);
        try {
            validateDomainName(domain);
            boolean matchesCname = projectDomainDnsChecker.matchesCname(domain);
            initializeProjectDomain(projectId, domain, projectDomainType, matchesCname);
        } finally {
            projectDomainLockService.unlockDomain(domain);
        }
    }

    public String remove(String projectDomainId) {
        log.info("Remove project domain has started. projectDomainId: {}", projectDomainId);
        String passiveId = passiveService.createUserActionPassive();
        ProjectDomain projectDomain = projectDomainRetrieveService.retrieveEntity(projectDomainId);
        validateIsNotAutoGenerated(projectDomain);
        projectDomain.setPassiveId(passiveId);
        projectDomainRepository.save(projectDomain);
        log.info("Remove project domain has completed. projectDomainId: {}, passiveId: {}", projectDomainId, passiveId);
        return passiveId;
    }

    private void validateDomainName(String domain) {
        if (Objects.isNull(domain) || !DomainNameUtil.isValidDomainAddress(domain)) {
            throw new BusinessException("project.domain.not-valid");
        }
        projectDomainRetrieveService.validateDomainIsNotInUse(domain);
    }

    private void initializeProjectDomain(String projectId, String domain, ProjectDomainType projectDomainType, boolean matchesCname) {
        ProjectDomain projectDomain = new ProjectDomain();
        projectDomain.setProjectId(projectId);
        projectDomain.setDomain(domain);
        projectDomain.setDomainType(projectDomainType);
        projectDomain.setCnameCheckResult(matchesCname ? ProjectDomainCnameCheckResultType.CNAME_CHECK_OK_READY_FOR_MANAGER : ProjectDomainCnameCheckResultType.CNAME_CHECK_FAILED);
        projectDomainRepository.save(projectDomain);
    }

    private static void validateIsNotAutoGenerated(ProjectDomain projectDomain) {
        if (ProjectDomainType.AUTO_GENERATED.equals(projectDomain.getDomainType())) {
            throw new BusinessException("project.domain.auto-generated-domain-cannot-be-deleted");
        }
    }
}
