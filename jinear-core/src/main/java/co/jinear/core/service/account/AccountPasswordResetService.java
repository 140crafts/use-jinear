package co.jinear.core.service.account;

import co.jinear.core.exception.NotFoundException;
import co.jinear.core.model.dto.account.AccountDto;
import co.jinear.core.model.dto.token.TokenDto;
import co.jinear.core.model.enumtype.localestring.LocaleType;
import co.jinear.core.model.enumtype.passive.PassiveReason;
import co.jinear.core.model.vo.account.password.AccountPasswordVo;
import co.jinear.core.model.vo.account.password.InitializeResetPasswordVo;
import co.jinear.core.model.vo.mail.AccountEngageMailVo;
import co.jinear.core.model.vo.token.GenerateTokenVo;
import co.jinear.core.service.mail.MailService;
import co.jinear.core.service.token.TokenService;
import co.jinear.core.system.NormalizeHelper;
import co.jinear.core.system.RandomHelper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.UUID;

import static co.jinear.core.model.enumtype.token.TokenType.CONFIRM_EMAIL;
import static co.jinear.core.model.enumtype.token.TokenType.RESET_PASSWORD;

@Slf4j
@Service
@RequiredArgsConstructor
public class AccountPasswordResetService {
    private static final Long RESET_PASSWORD_TTL = (long) (1000 * 60 * 30);

    private final AccountRetrieveService accountRetrieveService;
    private final AccountPasswordService accountPasswordService;
    private final TokenService tokenService;
    private final MailService mailService;

    public void sendResetPasswordMail(InitializeResetPasswordVo initializeResetPasswordVo) {
        log.info("Sending reset password mail. initializeResetPasswordVo: {}", initializeResetPasswordVo);
        AccountDto accountDto = accountRetrieveService.retrieveByEmail(initializeResetPasswordVo.getEmail())
                .orElseThrow(NotFoundException::new);
        TokenDto tokenDto = tokenService.retrieveValidTokenWithRelatedObject(accountDto.getEmail(), CONFIRM_EMAIL)
                .orElseGet(() -> generateResetPasswordToken(accountDto));
        sendPasswordResetMail(initializeResetPasswordVo.getPreferredLocale(), accountDto, tokenDto);
        log.info("Send reset password mail has finished for accountId: {}", accountDto.getAccountId());
    }

    @Transactional
    public void validateAndResetAccountPassword(String uniqueToken, LocaleType preferredLocale) {
        log.info("Validate and reset account password has started for uniqueToken: {}", uniqueToken);
        TokenDto tokenDto = tokenService.retrieveValidToken(uniqueToken, RESET_PASSWORD);
        String accountId = tokenDto.getRelatedObject();
        AccountDto accountDto = accountRetrieveService.retrieve(accountId);
        String newPassword = NormalizeHelper.normalizeStrictly(RandomHelper.generateRandomString());
        AccountPasswordVo accountPasswordVo = AccountPasswordVo.builder()
                .accountId(accountDto.getAccountId())
                .clearText(newPassword)
                .autoGenerated(Boolean.TRUE)
                .build();
        accountPasswordService.updateAccountPassword(accountPasswordVo);
        tokenService.passivizeToken(tokenDto.getTokenId(), accountDto.getAccountId(), PassiveReason.USER_ACTION);
        sendNewPasswordMail(preferredLocale, accountDto, newPassword);
    }

    private void sendNewPasswordMail(LocaleType preferredLocale, AccountDto accountDto, String newPassword) {
        log.info("Sending new password mail");
        try {
            mailService.sendNewPasswordMail(new AccountEngageMailVo(accountDto.getEmail(), preferredLocale, newPassword));
        } catch (Exception e) {
            log.error("Send new password mail has failed.", e);
        }

    }

    private void sendPasswordResetMail(LocaleType preferredLocale, AccountDto accountDto, TokenDto tokenDto) {
        try {
            mailService.sendResetPasswordMail(new AccountEngageMailVo(accountDto.getEmail(), preferredLocale, tokenDto.getUniqueToken()));
        } catch (Exception e) {
            log.error("Send password reset mail has failed.", e);
        }
    }

    private TokenDto generateResetPasswordToken(AccountDto accountDto) {
        log.info("Generate reset password token has started. email: {}, accountId: {}", accountDto.getEmail(), accountDto.getAccountId());
        GenerateTokenVo vo = GenerateTokenVo.builder()
                .relatedObject(accountDto.getAccountId())
                .tokenType(RESET_PASSWORD)
                .uniqueToken(UUID.randomUUID().toString())
                .commonToken(NormalizeHelper.normalizeStrictly(UUID.randomUUID().toString()))
                .ttl(RESET_PASSWORD_TTL)
                .build();
        return tokenService.generateToken(vo);
    }
}
