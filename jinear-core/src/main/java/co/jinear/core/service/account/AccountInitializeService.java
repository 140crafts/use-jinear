package co.jinear.core.service.account;

import co.jinear.core.exception.BusinessException;
import co.jinear.core.model.dto.account.AccountDto;
import co.jinear.core.model.entity.account.Account;
import co.jinear.core.model.enumtype.account.RoleType;
import co.jinear.core.model.enumtype.localestring.LocaleType;
import co.jinear.core.model.enumtype.workspace.WorkspaceJoinType;
import co.jinear.core.model.enumtype.workspace.WorkspaceVisibilityType;
import co.jinear.core.model.enumtype.username.UsernameRelatedObjectType;
import co.jinear.core.model.vo.account.AccountInitializeVo;
import co.jinear.core.model.vo.account.password.AccountPasswordVo;
import co.jinear.core.model.vo.workspace.WorkspaceInitializeVo;
import co.jinear.core.model.vo.username.InitializeUsernameVo;
import co.jinear.core.repository.AccountRepository;
import co.jinear.core.service.workspace.WorkspaceInitializeService;
import co.jinear.core.service.username.UsernameService;
import co.jinear.core.system.NormalizeHelper;
import co.jinear.core.system.RandomHelper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.Objects;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class AccountInitializeService {
    private static final String PERSONAL_WORKSPACE_HANDLE_PREFIX = "pws-";

    private final AccountRetrieveService accountRetrieveService;
    private final AccountRoleService accountRoleService;
    private final UsernameService usernameService;
    private final AccountPasswordService accountPasswordService;
    private final AccountRepository accountRepository;
    private final AccountMailConfirmationService accountMailConfirmationService;
    private final WorkspaceInitializeService workspaceInitializeService;
    private final ModelMapper modelMapper;

    @Transactional
    public AccountDto initializeAccount(AccountInitializeVo accountInitializeVo) {
        log.info("Account initialize has started. accountInitializeVo: {}", accountInitializeVo);
        validateEmail(accountInitializeVo);
        Account account = createAccount(accountInitializeVo);
        assignUserRole(account);
        initializeUsername(account);
        initializeAccountPassword(account, accountInitializeVo);
        initializePersonalWorkspace(account);
        sendMailConfirmationMail(account, accountInitializeVo);
        log.info("Account initialize has ended.");
        return modelMapper.map(account, AccountDto.class);
    }

    private Account createAccount(AccountInitializeVo accountInitializeVo) {
        log.info("Account create has started.");
        Account account = new Account();
        account.setEmail(accountInitializeVo.getEmail());
        account.setEmailConfirmed(accountInitializeVo.getEmailConfirmed());
        Account saved = accountRepository.save(account);
        log.info("Account create has finished. accountId: {}", saved.getAccountId());
        return saved;
    }

    private void validateEmail(AccountInitializeVo accountInitializeVo) {
        if (Objects.isNull(accountInitializeVo.getEmail())) {
            throw new BusinessException();
        }
        validateEmailIsNotUsed(accountInitializeVo.getEmail());
    }

    private void validateEmailIsNotUsed(String email) {
        accountRetrieveService.retrieveByEmail(email)
                .ifPresent(accountDto -> {
                    throw new BusinessException("account.email-in-use");
                });
    }

    private void assignUserRole(Account account) {
        accountRoleService.assignRoleToAccount(account.getAccountId(), RoleType.USER);
    }

    private void initializeAccountPassword(Account account, AccountInitializeVo accountInitializeVo) {
        String password = Optional.of(accountInitializeVo)
                .map(AccountInitializeVo::getPassword)
                .orElse(NormalizeHelper.normalizeStrictly(RandomHelper.generateRandomString()));
        AccountPasswordVo accountPasswordVo = AccountPasswordVo.builder()
                .accountId(account.getAccountId())
                .autoGenerated(Boolean.FALSE)
                .clearText(password)
                .build();
        accountPasswordService.createPassword(accountPasswordVo);
    }

    private void initializeUsername(Account account) {
        String username = getUsernameFromEmail(account);
        InitializeUsernameVo initializeUsernameVo = new InitializeUsernameVo();
        initializeUsernameVo.setUsername(username);
        initializeUsernameVo.setRelatedObjectId(account.getAccountId());
        initializeUsernameVo.setRelatedObjectType(UsernameRelatedObjectType.ACCOUNT);
        initializeUsernameVo.setAppendRandomStrOnCollision(Boolean.TRUE);
        usernameService.assignUsername(initializeUsernameVo);
    }

    private void initializePersonalWorkspace(Account account) {
        String username = getUsernameFromEmail(account);
        WorkspaceInitializeVo workspaceInitializeVo = new WorkspaceInitializeVo();
        workspaceInitializeVo.setOwnerId(account.getAccountId());
        workspaceInitializeVo.setTitle(username);
        workspaceInitializeVo.setHandle(PERSONAL_WORKSPACE_HANDLE_PREFIX + username);
        workspaceInitializeVo.setVisibility(WorkspaceVisibilityType.HIDDEN_LISTED);
        workspaceInitializeVo.setJoinType(WorkspaceJoinType.NEVER);
        workspaceInitializeVo.setAppendRandomStrOnCollision(Boolean.TRUE);
        workspaceInitializeVo.setIsPersonal(Boolean.TRUE);
        workspaceInitializeService.initializeWorkspace(workspaceInitializeVo);
    }

    private void sendMailConfirmationMail(Account account, AccountInitializeVo accountInitializeVo) {
        Optional.of(accountInitializeVo)
                .map(AccountInitializeVo::getEmailConfirmed)
                .filter(Boolean.FALSE::equals)
                .ifPresent(bool -> {
                    LocaleType localeType = Optional.of(accountInitializeVo)
                            .map(AccountInitializeVo::getLocale)
                            .orElse(LocaleType.EN);
                    accountMailConfirmationService.sendConfirmEmailMail(account.getAccountId(), localeType);
                });
    }

    private String getUsernameFromEmail(Account account) {
        return Optional.of(account)
                .map(Account::getEmail)
                .map(email -> email.split("@"))
                .map(strings -> strings[0])
                .orElseThrow(BusinessException::new);
    }
}
